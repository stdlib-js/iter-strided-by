{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isIteratorLike from '@stdlib/assert-is-iterator-like' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// VARIABLES //\n\nvar DEFAULT_OFFSET = 0;\nvar DEFAULT_EAGER = false;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which steps according to a provided callback function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - stride function\n* @param {NonNegativeInteger} [offset=0] - offset\n* @param {boolean} [eager=false] - boolean indicating whether to eagerly advance the input iterator when provided a non-zero offset\n* @param {*} [thisArg] - stride function execution context\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} fourth argument must be a boolean\n* @returns {Iterator} iterator\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator' ;\n*\n* var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6, 7 ] );\n*\n* function stride( v, i ) {\n*     return (i % 10)+1;\n* }\n*\n* var iter = iterStridedBy( arr, stride );\n*\n* var r = iter.next().value;\n* // returns 0\n*\n* r = iter.next().value;\n* // returns 1\n*\n* r = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\nfunction iterStridedBy( iterator, fcn, offset, eager, thisArg ) {\n\tvar stride;\n\tvar iter;\n\tvar bool;\n\tvar FLG;\n\tvar idx;\n\tvar ctx;\n\tvar ret;\n\tvar o;\n\tvar v;\n\tvar i;\n\tvar s;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0Cs4J', iterator ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0Cs2S', fcn ) );\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( offset ) ) {\n\t\t\tidx = offset;\n\t\t} else {\n\t\t\tidx = DEFAULT_OFFSET;\n\t\t\tctx = offset;\n\t\t}\n\t\tbool = DEFAULT_EAGER;\n\t} else if ( arguments.length === 4 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( format( '0Cs2y', offset ) );\n\t\t}\n\t\tidx = offset;\n\t\tif ( isBoolean( eager ) ) {\n\t\t\tbool = eager;\n\t\t} else {\n\t\t\tbool = DEFAULT_EAGER;\n\t\t\tctx = eager;\n\t\t}\n\t} else if ( arguments.length > 4 ) {\n\t\tif ( !isNonNegativeInteger( offset ) ) {\n\t\t\tthrow new TypeError( format( '0Cs2y', offset ) );\n\t\t}\n\t\tidx = offset;\n\t\tif ( !isBoolean( eager ) ) {\n\t\t\tthrow new TypeError( format( '0Cs4W', eager ) );\n\t\t}\n\t\tbool = eager;\n\t\tctx = thisArg;\n\t} else {\n\t\tidx = DEFAULT_OFFSET;\n\t\tbool = DEFAULT_EAGER;\n\t}\n\tif ( bool ) {\n\t\tfor ( i = 0; i < idx; i++ ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\tret = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// NOTE: if we've successfully advanced the input iterator, `i` is currently equal to `idx` (i.e., the offset)\n\t\ti -= 1;\n\t} else {\n\t\ti = -1;\n\t}\n\ts = -1;\n\tstride = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\to = idx;\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @throws {TypeError} callback function must return a positive integer\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\tif ( ret ) {\n\t\t\t\tv = ret;\n\t\t\t\tret = null;\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\ti += 1;\n\t\twhile ( i < idx ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\ts += 1;\n\t\tstride = fcn.call( ctx, v.value, i, s, stride );\n\t\tif ( !isPositiveInteger( stride ) ) {\n\t\t\tthrow new TypeError( format( '0Cs4X', stride ) );\n\t\t}\n\t\tidx += stride;\n\t\treturn v;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterStridedBy( iterator[ iteratorSymbol ](), fcn, o, bool, ctx );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterStridedBy;\n"],"names":["iterStridedBy","iterator","fcn","offset","eager","thisArg","stride","iter","bool","FLG","idx","ctx","ret","o","v","i","s","isIteratorLike","TypeError","format","isFunction","arguments","length","isNonNegativeInteger","isBoolean","next","done","setReadOnly","end","iteratorSymbol","factory","call","value","isPositiveInteger"],"mappings":";;gxBA4EA,SAASA,EAAeC,EAAUC,EAAKC,EAAQC,EAAOC,GACrD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBhB,GACrB,MAAM,IAAIiB,UAAWC,EAAQ,QAASlB,IAEvC,IAAMmB,EAAYlB,GACjB,MAAM,IAAIgB,UAAWC,EAAQ,QAASjB,IAEvC,GAA0B,IAArBmB,UAAUC,OACTC,EAAsBpB,GAC1BO,EAAMP,GAENO,EAhEkB,EAiElBC,EAAMR,GAEPK,EAlEkB,WAmEZ,GAA0B,IAArBa,UAAUC,OAAe,CACpC,IAAMC,EAAsBpB,GAC3B,MAAM,IAAIe,UAAWC,EAAQ,QAAShB,IAEvCO,EAAMP,EACDqB,EAAWpB,GACfI,EAAOJ,GAEPI,EA3EiB,MA4EjBG,EAAMP,QAED,GAAKiB,UAAUC,OAAS,EAAI,CAClC,IAAMC,EAAsBpB,GAC3B,MAAM,IAAIe,UAAWC,EAAQ,QAAShB,IAGvC,GADAO,EAAMP,GACAqB,EAAWpB,GAChB,MAAM,IAAIc,UAAWC,EAAQ,QAASf,IAEvCI,EAAOJ,EACPO,EAAMN,OAENK,EA1FmB,EA2FnBF,EA1FkB,MA4FnB,GAAKA,EAAO,CACX,IAAMO,EAAI,EAAGA,EAAIL,EAAKK,IAErB,IADAD,EAAIb,EAASwB,QACNC,KAAO,CACbjB,GAAM,EACNG,EAAME,EACN,MAIFC,GAAK,OAELA,GAAK,EAeN,OAbAC,GAAK,EACLV,EAAS,EAITqB,EADApB,EAAO,GACY,OAAQkB,GAC3BE,EAAapB,EAAM,SAAUqB,GAGxBC,GAAkBT,EAAYnB,EAAU4B,MAC5ChB,EAAIH,EACJiB,EAAapB,EAAMsB,EAAgBC,IAE7BvB,EASP,SAASkB,IACR,IAAIX,EACJ,GAAKL,EACJ,OAAKG,GACJE,EAAIF,EACJA,EAAM,KACCE,GAED,CACNY,MAAQ,GAIV,IADAX,GAAK,EACGA,EAAIL,GAAM,CAEjB,IADAI,EAAIb,EAASwB,QACNC,KAEN,OADAjB,GAAM,EACC,CACNiB,MAAQ,GAGVX,GAAK,EAGN,IADAD,EAAIb,EAASwB,QACNC,KAEN,OADAjB,GAAM,EACCK,EAIR,GAFAE,GAAK,EACLV,EAASJ,EAAI6B,KAAMpB,EAAKG,EAAEkB,MAAOjB,EAAGC,EAAGV,IACjC2B,EAAmB3B,GACxB,MAAM,IAAIY,UAAWC,EAAQ,QAASb,IAGvC,OADAI,GAAOJ,EACAQ,EAUR,SAASc,EAAKI,GAEb,OADAvB,GAAM,EACDY,UAAUC,OACP,CACNU,MAASA,EACTN,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASI,IACR,OAAO9B,EAAeC,EAAU4B,KAAoB3B,EAAKW,EAAGL,EAAMG"}